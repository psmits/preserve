// Code generated by Stan version 2.5

#include <stan/model/model_header.hpp>
#include <stan/common/command.hpp>

namespace neg_bin_mod_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
using namespace stan::prob;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

class neg_bin_mod_model : public prob_grad {
private:
    int C;
    int G;
    int O;
    vector<int> count;
    vector<int> genus;
    vector<int> order;
    vector<double> off;
public:
    neg_bin_mod_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        static const char* function__ = "neg_bin_mod_model_namespace::neg_bin_mod_model(%1%)";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        context__.validate_dims("data initialization", "C", "int", context__.to_vec());
        C = int(0);
        vals_i__ = context__.vals_i("C");
        pos__ = 0;
        C = vals_i__[pos__++];
        context__.validate_dims("data initialization", "G", "int", context__.to_vec());
        G = int(0);
        vals_i__ = context__.vals_i("G");
        pos__ = 0;
        G = vals_i__[pos__++];
        context__.validate_dims("data initialization", "O", "int", context__.to_vec());
        O = int(0);
        vals_i__ = context__.vals_i("O");
        pos__ = 0;
        O = vals_i__[pos__++];
        context__.validate_dims("data initialization", "count", "int", context__.to_vec(C));
        stan::math::validate_non_negative_index("count", "C", C);
        count = std::vector<int>(C,int(0));
        vals_i__ = context__.vals_i("count");
        pos__ = 0;
        size_t count_limit_0__ = C;
        for (size_t i_0__ = 0; i_0__ < count_limit_0__; ++i_0__) {
            count[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "genus", "int", context__.to_vec(C));
        stan::math::validate_non_negative_index("genus", "C", C);
        genus = std::vector<int>(C,int(0));
        vals_i__ = context__.vals_i("genus");
        pos__ = 0;
        size_t genus_limit_0__ = C;
        for (size_t i_0__ = 0; i_0__ < genus_limit_0__; ++i_0__) {
            genus[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "order", "int", context__.to_vec(G));
        stan::math::validate_non_negative_index("order", "G", G);
        order = std::vector<int>(G,int(0));
        vals_i__ = context__.vals_i("order");
        pos__ = 0;
        size_t order_limit_0__ = G;
        for (size_t i_0__ = 0; i_0__ < order_limit_0__; ++i_0__) {
            order[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "off", "double", context__.to_vec(C));
        stan::math::validate_non_negative_index("off", "C", C);
        off = std::vector<double>(C,double(0));
        vals_r__ = context__.vals_r("off");
        pos__ = 0;
        size_t off_limit_0__ = C;
        for (size_t i_0__ = 0; i_0__ < off_limit_0__; ++i_0__) {
            off[i_0__] = vals_r__[pos__++];
        }

        // validate data


        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += G;
        num_params_r__ += O;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
    }

    ~neg_bin_mod_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;


        if (!(context__.contains_r("mu")))
            throw std::runtime_error("variable mu missing");
        vals_r__ = context__.vals_r("mu");
        pos__ = 0U;
        context__.validate_dims("initialization", "mu", "double", context__.to_vec(G));
        std::vector<double> mu(G,double(0));
        for (int i0__ = 0U; i0__ < G; ++i0__)
            mu[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < G; ++i0__)
            try { writer__.scalar_lb_unconstrain(0,mu[i0__]); } catch (const std::exception& e) {  throw std::runtime_error(std::string("Error transforming variable mu: ") + e.what()); }

        if (!(context__.contains_r("mu_gen")))
            throw std::runtime_error("variable mu_gen missing");
        vals_r__ = context__.vals_r("mu_gen");
        pos__ = 0U;
        context__.validate_dims("initialization", "mu_gen", "double", context__.to_vec(O));
        std::vector<double> mu_gen(O,double(0));
        for (int i0__ = 0U; i0__ < O; ++i0__)
            mu_gen[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < O; ++i0__)
            try { writer__.scalar_unconstrain(mu_gen[i0__]); } catch (const std::exception& e) {  throw std::runtime_error(std::string("Error transforming variable mu_gen: ") + e.what()); }

        if (!(context__.contains_r("sigma_gen")))
            throw std::runtime_error("variable sigma_gen missing");
        vals_r__ = context__.vals_r("sigma_gen");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma_gen", "double", context__.to_vec());
        double sigma_gen(0);
        sigma_gen = vals_r__[pos__++];
        try { writer__.scalar_lb_unconstrain(0,sigma_gen); } catch (const std::exception& e) {  throw std::runtime_error(std::string("Error transforming variable sigma_gen: ") + e.what()); }

        if (!(context__.contains_r("mu_ord")))
            throw std::runtime_error("variable mu_ord missing");
        vals_r__ = context__.vals_r("mu_ord");
        pos__ = 0U;
        context__.validate_dims("initialization", "mu_ord", "double", context__.to_vec());
        double mu_ord(0);
        mu_ord = vals_r__[pos__++];
        try { writer__.scalar_unconstrain(mu_ord); } catch (const std::exception& e) {  throw std::runtime_error(std::string("Error transforming variable mu_ord: ") + e.what()); }

        if (!(context__.contains_r("sigma_ord")))
            throw std::runtime_error("variable sigma_ord missing");
        vals_r__ = context__.vals_r("sigma_ord");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma_ord", "double", context__.to_vec());
        double sigma_ord(0);
        sigma_ord = vals_r__[pos__++];
        try { writer__.scalar_lb_unconstrain(0,sigma_ord); } catch (const std::exception& e) {  throw std::runtime_error(std::string("Error transforming variable sigma_ord: ") + e.what()); }

        if (!(context__.contains_r("phi")))
            throw std::runtime_error("variable phi missing");
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        context__.validate_dims("initialization", "phi", "double", context__.to_vec());
        double phi(0);
        phi = vals_r__[pos__++];
        try { writer__.scalar_lb_unconstrain(0,phi); } catch (const std::exception& e) {  throw std::runtime_error(std::string("Error transforming variable phi: ") + e.what()); }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        vector<T__> mu;
        size_t dim_mu_0__ = G;
        mu.reserve(dim_mu_0__);
        for (size_t k_0__ = 0; k_0__ < dim_mu_0__; ++k_0__) {
            if (jacobian__)
                mu.push_back(in__.scalar_lb_constrain(0,lp__));
            else
                mu.push_back(in__.scalar_lb_constrain(0));
        }

        vector<T__> mu_gen;
        size_t dim_mu_gen_0__ = O;
        mu_gen.reserve(dim_mu_gen_0__);
        for (size_t k_0__ = 0; k_0__ < dim_mu_gen_0__; ++k_0__) {
            if (jacobian__)
                mu_gen.push_back(in__.scalar_constrain(lp__));
            else
                mu_gen.push_back(in__.scalar_constrain());
        }

        T__ sigma_gen;
        (void) sigma_gen;   // dummy to suppress unused var warning
        if (jacobian__)
            sigma_gen = in__.scalar_lb_constrain(0,lp__);
        else
            sigma_gen = in__.scalar_lb_constrain(0);

        T__ mu_ord;
        (void) mu_ord;   // dummy to suppress unused var warning
        if (jacobian__)
            mu_ord = in__.scalar_constrain(lp__);
        else
            mu_ord = in__.scalar_constrain();

        T__ sigma_ord;
        (void) sigma_ord;   // dummy to suppress unused var warning
        if (jacobian__)
            sigma_ord = in__.scalar_lb_constrain(0,lp__);
        else
            sigma_ord = in__.scalar_lb_constrain(0);

        T__ phi;
        (void) phi;   // dummy to suppress unused var warning
        if (jacobian__)
            phi = in__.scalar_lb_constrain(0,lp__);
        else
            phi = in__.scalar_lb_constrain(0);


        // transformed parameters

        // initialized transformed params to avoid seg fault on val access


        // validate transformed parameters

        const char* function__ = "validate transformed params %1%";
        (void) function__; // dummy to suppress unused var warning
        // model body
        lp_accum__.add(normal_log<propto__>(mu_ord, 0, 10));
        lp_accum__.add(cauchy_log<propto__>(sigma_ord, 0, 2.5));
        for (int o = 1; o <= O; ++o) {
            lp_accum__.add(normal_log<propto__>(get_base1(mu_gen,o,"mu_gen",1), mu_ord, sigma_ord));
        }
        lp_accum__.add(cauchy_log<propto__>(sigma_gen, 0, 2.5));
        for (int g = 1; g <= G; ++g) {
            lp_accum__.add(normal_log<propto__>(get_base1(mu,g,"mu",1), get_base1(mu_gen,get_base1(order,g,"order",1),"mu_gen",1), sigma_gen));
        }
        lp_accum__.add(cauchy_log<propto__>(phi, 0, 2.5));
        for (int i = 1; i <= C; ++i) {
            lp_accum__.add(neg_binomial_2_log_log<propto__>(get_base1(count,i,"count",1), (get_base1(mu,get_base1(genus,i,"genus",1),"mu",1) + log(get_base1(off,i,"off",1))), phi));
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("mu");
        names__.push_back("mu_gen");
        names__.push_back("sigma_gen");
        names__.push_back("mu_ord");
        names__.push_back("sigma_ord");
        names__.push_back("phi");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(O);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "neg_bin_mod_model_namespace::write_array(%1%)";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        vector<double> mu;
        size_t dim_mu_0__ = G;
        for (size_t k_0__ = 0; k_0__ < dim_mu_0__; ++k_0__) {
            mu.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> mu_gen;
        size_t dim_mu_gen_0__ = O;
        for (size_t k_0__ = 0; k_0__ < dim_mu_gen_0__; ++k_0__) {
            mu_gen.push_back(in__.scalar_constrain());
        }
        double sigma_gen = in__.scalar_lb_constrain(0);
        double mu_ord = in__.scalar_constrain();
        double sigma_ord = in__.scalar_lb_constrain(0);
        double phi = in__.scalar_lb_constrain(0);
        for (int k_0__ = 0; k_0__ < G; ++k_0__) {
            vars__.push_back(mu[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < O; ++k_0__) {
            vars__.push_back(mu_gen[k_0__]);
        }
        vars__.push_back(sigma_gen);
        vars__.push_back(mu_ord);
        vars__.push_back(sigma_ord);
        vars__.push_back(phi);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;



        // validate transformed parameters

        // write transformed parameters

        if (!include_gqs__) return;
        // declare and define generated quantities


        // validate generated quantities

        // write generated quantities
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }


    void write_csv_header(std::ostream& o__) const {
        stan::io::csv_writer writer__(o__);
        for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
            writer__.comma();
            o__ << "mu" << '.' << k_0__;
        }
        for (int k_0__ = 1; k_0__ <= O; ++k_0__) {
            writer__.comma();
            o__ << "mu_gen" << '.' << k_0__;
        }
        writer__.comma();
        o__ << "sigma_gen";
        writer__.comma();
        o__ << "mu_ord";
        writer__.comma();
        o__ << "sigma_ord";
        writer__.comma();
        o__ << "phi";
        writer__.newline();
    }

    template <typename RNG>
    void write_csv(RNG& base_rng__,
                   std::vector<double>& params_r__,
                   std::vector<int>& params_i__,
                   std::ostream& o__,
                   std::ostream* pstream__ = 0) const {
        stan::io::reader<double> in__(params_r__,params_i__);
        stan::io::csv_writer writer__(o__);
        static const char* function__ = "neg_bin_mod_model_namespace::write_csv(%1%)";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        vector<double> mu;
        size_t dim_mu_0__ = G;
        for (size_t k_0__ = 0; k_0__ < dim_mu_0__; ++k_0__) {
            mu.push_back(in__.scalar_lb_constrain(0));
            writer__.write(mu[k_0__]);
        }
        vector<double> mu_gen;
        size_t dim_mu_gen_0__ = O;
        for (size_t k_0__ = 0; k_0__ < dim_mu_gen_0__; ++k_0__) {
            mu_gen.push_back(in__.scalar_constrain());
            writer__.write(mu_gen[k_0__]);
        }
        double sigma_gen = in__.scalar_lb_constrain(0);
        writer__.write(sigma_gen);
        double mu_ord = in__.scalar_constrain();
        writer__.write(mu_ord);
        double sigma_ord = in__.scalar_lb_constrain(0);
        writer__.write(sigma_ord);
        double phi = in__.scalar_lb_constrain(0);
        writer__.write(phi);

        // declare, define and validate transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;




        // write transformed parameters

        // declare and define generated quantities


        // validate generated quantities

        // write generated quantities
        writer__.newline();
    }

    template <typename RNG>
    void write_csv(RNG& base_rng,
                   Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                   std::ostream& o,
                   std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<int> params_i_vec;  // dummy
      write_csv(base_rng, params_r_vec, params_i_vec, o, pstream);
    }

    static std::string model_name() {
        return "neg_bin_mod_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= O; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_gen" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_gen";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_ord";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_ord";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= O; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_gen" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_gen";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_ord";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_ord";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
    }

}; // model

} // namespace

typedef neg_bin_mod_model_namespace::neg_bin_mod_model stan_model;

